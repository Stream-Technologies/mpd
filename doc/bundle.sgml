<!-- $Id: bundle.sgml,v 1.21 2007/01/27 00:44:58 amotin Exp $ -->
<!-- mpd netgraph enabled user mode PPP daemon -->

<!-- <!DOCTYPE linuxdoc PUBLIC '-//FreeBSD//DTD linuxdoc//EN'> -->

  <sect><heading>Bundle layer commands<label id="bundle"></heading>

<p>

  This chapter describes commands that configure the bundle layer.
  All of these commands (except <bf><tt>new</tt></bf>)
  apply to the currently active bundle, i.e.,
  the bundle shown at the command line prompt.

<descrip>

<tag><tt>new </tt>[<tt> -n </tt>][<tt> -N </tt>][<tt> -t </tt>][<tt> -a </tt>]
		  [<tt> -i <em>iface</em> </tt>]
		  <tt> <em>bundle</em> <em>link1</em> </tt>
		  [<tt> <em>link2</em> </tt> ... ]
</tag>

This command creates a new bundle named <tt><em>bundle</em></tt>.
The bundle will be associated with system interface
<tt><em>iface</em></tt>, which should be the name of a netgraph
interface, i.e., <tt>ng0</tt>, <tt>ng1</tt>, etc.  If an interface
is specified but does not exist yet, mpd will create it (and any
lower numbered <tt>ng*</tt> interfaces as well).  If no
<tt><em>iface</em></tt> is specified, mpd will create a new one.
Specifying an interface explicitly is advised, as otherwise a
new interface will be created on your system every time mpd is
invoked.

If <tt>-t</tt> option is specified, a ng_tee(4) node will be inserted
into the bundle graph, right after the interface node. The tee node
can be useful for debugging or traffic accounting.

If <tt>-a</tt> option is specified, a ng_nat(4) node will be inserted
into the bundle graph, just before bpf node. The ng_nat(4) node
performs network address translation (NAT) of packets passing through it.
ng_nat(4) node type exists since FreeBSD 6.0.

If <tt>-n</tt> option is specified, the bundle will participate in
NetFlow generation. See <ref id="netflow" name="the NetFlow chapter">
for more information. The <tt>-N</tt> option is like <tt>-n</tt>, but 
generates NetFlow data for outgoing packets instead of incoming.

The links that constitute the bundle are created and named
<tt><em>link1</em></tt>, <tt><em>link2</em></tt>, etc.  For each
link, there must be a corresponding entry with the same name (i.e.,
label) in <tt>mpd.links</tt>. This entry must at the very least
define the type of the link (via the <tt>set link type</tt> command).

<tag><tt>
set bundle period <em>seconds</em>
<newline>set bundle hiwat <em>percent</em>
<newline>set bundle lowat <em>percent</em>
<newline>set bundle min-con <em>seconds</em>
<newline>set bundle min-dis <em>seconds</em>
</tt></tag>

These commands are only meaningful when bandwidth management is enabled.
Mpd will attempt to bring up a new link or take down an existing link
when the utilization goes above <tt><em>hiwat</em></tt> or
below <tt><em>lowat</em></tt> percent, respectively. The utilization is
sampled every <tt><em>period</em></tt> divided by 6 seconds, and
is averaged over the past <tt><em>period</em></tt> seconds.

Mpd will not attempt to disconnect a link unless previous one was 
disconnected at least <tt><em>min-dis</em></tt> seconds before. 
Similarly, mpd will not open a link unless previous was opened at least
<tt><em>min-con</em></tt> seconds before. These two parameters
help prevent oscillations, but cause slower response time.

<tag><tt>
set bundle retry <em>seconds</em>
</tt></tag>

This sets the finite state machine (FSM) retry interval for all
FSM's on this bundle. The default is 2 seconds. This command
should only be used in exceptional situations, such as doing
PPP over high-latency satellite links.

<tag><tt>
set bundle accept <em>option ...</em>
<newline>set bundle deny <em>option ...</em>
<newline>set bundle enable <em>option ...</em>
<newline>set bundle disable <em>option ...</em>
<newline>set bundle yes <em>option ...</em>
<newline>set bundle no <em>option ...</em>
</tt></tag>

These commands configure various bundle options. Most options 
are <em>bi-directional</em> in that they can be independently
enabled and disabled in each direction.

<p>
The <tt><bf>enable</bf></tt> and <tt><bf>disable</bf></tt> commands determine
whether we want the corresponding option.
The <tt><bf>accept</bf></tt> and <tt><bf>deny</bf></tt> commands determine
whether we will allow the peer to request the corresponding option.

<p>
The <bf><tt>yes</tt></bf> command is the same as
<tt><bf>enable</bf></tt> and <tt><bf>accept</bf></tt>.
The <bf><tt>no</tt></bf> command is the same as
<tt><bf>disable</bf></tt> and <tt><bf>deny</bf></tt>.

</descrip>

<p>
The options available at the bundle layer are:

<descrip>

<tag><tt>bw-manage</tt></tag>

This command enables <em>bandwidth management</em>, in which mpd attempts
to dynamically adjust the number of connected links depending on the
traffic load.

The proper functioning of bandwidth management depends on the correct
latency and bandwidth information configured for each link; see the
<tt><bf>set link latency</bf></tt> and <tt><bf>set link bandwidth</bf></tt>
commands.

The default for this option is off -- mpd connects the links ``all or none.''

<tag><tt>multilink</tt></tag>

This command enables multi-link PPP on the bundle. This option is required
in both directions if there is more than one link in the bundle. However,
multi-link PPP is sometimes useful on single links when the link MTU is
low; multi-link PPP allows arbitrarily long packets to go over a link
in fragments.

This option defaults to <tt>enable</tt> and <tt>accept</tt> unless
there is only one link in the bundle, in which case it defaults to
<tt>disable</tt> and <tt>deny</tt> (i.e., normal non-multilink PPP).

<tag><tt>round-robin</tt></tag>

When multilink PPP is enabled and there are two or more links
connected, this option enables round robin packet scheduling
across the links.  That is, instead of breaking each packet
into fragments and delivering the individual fragments over
all the links in the bundle, each packet is delivered whole
over single link.  The link is chosen by rotating in round-robin
fashion over all the links in the bundle.

This option normally would result in higher latency and
possible delays due to TCP packets being received out of order;
however, it may help in certain situations of high packet
loss or broken peer equipment.

<tag><tt>shortseq</tt></tag>

This option is only meaningful if multi-link PPP is negotiated.
It proscribes shorter multi-link fragment headers,
saving two bytes on every frame. It defaults to
<tt>enable</tt> and <tt>accept</tt>.

<tag><tt>ipcp</tt></tag>

Enable/Disable IPCP negotiation. Default is enabled.

<tag><tt>ipv6cp</tt></tag>

Enable/Disable IPV6CP negotiation. Default is disabled.

<tag><tt>compression</tt></tag>

Enable/Disable CCP (Compression Control Protocol) negotiation. Default is disabled.

<tag><tt>encryption</tt></tag>

Enable/Disable ECP (Encryption Control Protocol) negotiation. Default is disabled.

<tag><tt>crypt-reqd</tt></tag>

Require encryption.
When encryption support is compiled into mpd, this option
causes mpd to drop the link if encryption cannot be succesfully
negotiated in both directions. This means in effect, ``use encryption
or don't connect at all.''

The default for this option is off.

<tag><tt>noretry</tt></tag>

This tells mpd to not attempt to reconnect a bundle whose last
link has closed. This is needed for dialin-only bundles, where
mpd doesn't know how to initiate an outgoing connection.

</descrip>


</p>

